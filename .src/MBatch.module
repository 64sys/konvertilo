' Gambas module file

'
' Konvertilo
' Conversor y manipulador de archivos
'
' Copyright (C) Martín Belmonte
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
'

Public Function FileDelibery(strTool As String, strPath As String, Optional intPage As Integer, Optional strMod As String) As String '' Funcion que reparte el archivo a una funcion coincidente con el nombre de la herramienta "Tool" en el segundo parametro

  Dim str As String

  str = "0"

  Select strTool
      'General
    Case "File-Rename" 'Renombrador de archivos

    Case "File-Check" 'Verificador de nombre de archivo

      '## JPEG
    Case "JPEG>Email" 'Crea copias reducidas en un directorio temporal y las adjunta en un nuevo email.
      'str = JPEGEmail(strPath)

    Case "JPEG>GIFEmail" 'Crea un archivo GIF y lo adjunta en un nuevo email.
      str = JPEGGIFEmail(strPath)

    Case "JPEG>OCR-Text" 'Reconocimiento optico de caracteres
      str = JPEGOCRText(strPath, strMod)

    Case "JPEG>Copy-Reduced-Color" 'Crea una copia reducida en la misma ubicación que la original
    Case "JPEG>Copy-Reduced-Gray" 'Crea una copia reducida en escala de grices en la misma ubicación que la original
    Case "JPEG>Copy-Gray" 'Crea una copia en escala de grices en la misma ubicación que la original
    Case "JPEG>Square" 'Crea una copia reducida de proporción cuadrada en la misma ubicación que la original.

    Case "JPEG>PDF" 'Crea un archivo PDF con todas las imagenes que se le pase.
      str = JPEGPDF(strPath, intPage)

      '## PNG
    Case "PNG>Copy-Reduced-Color" 'Crea una copia reducida en la misma ubicación que la original
    Case "PNG>JPEG-Copy-Reduced-Color" 'Crea una copia reducida en la misma ubicación que la original
      str = PNGJPEGReduced(strPath)

    Case "PNG>OCR-Text" 'Reconocimiento optico de caracteres
      str = PNGOCRText(strPath, strMod)

      '## ODT
    Case "ODT-Thumbnail" 'Extractor de miniatura del documento
    Case "ODT>EPUB" 'Convertir documentos ODT en documentos EPUB

      '##PDF
    Case "PDF>Decrypt" 'Crea una copia desencriptada del archivo.
      str = PDFDecrypt(strPath)

    Case "PDF>Image" 'Extractor de paginas en formato de imagen jpeg una imagen por página.
      str = PDFImage(strPath, intPage, strMod)

    Case "PDF>PDF-R90" 'Rota las paginas 90 grados.
      str = PDFR90(strPath)

    Case "PDF>Pages" 'Extractor de paginas en formato pdf

    Case "PDF>OCR-Text" 'Extractor de paginas en formato de imagen TIF y reconocimiento optico de caracteres
      str = PDFOCRText(strPath, intPage, strMod)

      '## TXT
    Case "TXT>WAV" 'Crea un archivo de sonido a partir de uno de texto
      str = TXT2WAV(strPath, strMod)

      '## Video
    Case "Video>Frame" 'Extractor de fotograma de un video

    Case "Audio-Extractor" 'Extractor del audio de un video
      str = AudioExtractor(strPath)

    Case "Video-Extractor" 'Extractor del audio de un video
      str = VideoExtractor(strPath)

    Case "Video-Mixer" 'Crea un video copia pero sin audio y le agrega una pista de audio que se llama igual que el video
      str = VideoMixer(strPath)

    Case "Media>Arrange" 'Mueve las fotografias organizandolas según su fecha de captura.
      str = MediaArrange(strPath)

      '## MDB, ACCDB
    Case "JET>SQL" 'Crea los archivos SQL necesarios para reconstruir una base de datos Jet en SQLite, PostgreSQL y MySQL

  End Select

  Return str

End

Public Function PlayWAV(strPath As String) As Integer '' Esta funcion reproduce un archivo WAV comn el programa mplayer. Dependenciaas: mplayer. Devuelve el numero PID del proceso.

  Dim strCommand As String
  Dim prsWav As Process
  Dim intWav As Integer

End

Public Function TXT2WAV(strPath As String, strLang As String) As String '' Esta funcion convierte un archivo de texto TXT en un archivo WAV. Como parametros de entrada requiere una ruta valida a un archivo TXT que contenga el texto y el idioma.

  Dim strCommand As String
  Dim prsWav As Process

  Dim strDir As String
  Dim strDirBase As String
  Dim strFileWav As String

  strDir = File.Dir(strPath)

  Select strLang

    Case "en_GB", "en", "eng", "en-GB"
      strLang = "en-GB"
    Case "en-US", "en_US"
      strLang = "en-US"
    Case "de-DE"
      strLang = "de-DE"
    Case "es_ES", "es", "spa", "es-ES"
      strLang = "es-ES"
    Case "fr-FR", "fra"
      strLang = "fr-FR"
    Case "it-IT", "ita"
      strLang = "it-IT"
    Case Else
      strLang = "Error"
  End Select

  If strLang <> "Error" Then

    strDirBase = File.BaseName(strPath)
    strFileWav = strDir &/ strDirBase & ".wav"

    strCommand = "pico2wave --lang=" & strLang & " --wave='" & strFileWav & "' " & Chr(34) & "$(cat '" & strPath & "')" & Chr(34)

    Print strCommand

    prsWav = Shell strCommand

    While
      prsWav.State = prsWav.Running
      Wait 0.1
    Wend

  Endif

  If Exist(strFileWav) Then
    Return strFileWav
  Else
    Return "0"
  Endif

End

Public Function AudioExtractor(strPath As String) As String '' Esta funcion extrae solamente la pista de audio de un archivo de video. Devuelve la rutade destino del archivo extraido

  Dim strCommand As String
  Dim prsAE As Process
  Dim strDir As String
  Dim strDirBase As String
  Dim strAudioFile As String

  strDir = File.Dir(strPath)
  strDirBase = File.BaseName(strPath)

  strAudioFile = strDir &/ strDirBase & ".ogg"

  strCommand = "avconv -i '" & strPath & "' -vn "
  strCommand &= "-af volume=7dB:precision=fixed "
  strCommand &= "-acodec libvorbis '" & strAudioFile & "'"

  Print strCommand

  prsAE = Shell strCommand For Read As "ExtAudio"

  While
    prsAE.State = prsAE.Running
    'Print "Running"
    Wait 2
  Wend

  If Exist(strAudioFile) Then
    Print "Audio file exist: " & strAudioFile
    If Stat(strAudioFile).Type = gb.File Then
      Return strAudioFile
    Else
      Return "0"
    Endif
  Else
    Return "0"
  Endif

End

Public Sub ExtAudio_read()

  Dim lineaconsola As String

  Read #Last, lineaconsola, -80
  'lineaconsola = Trim(lineaconsola)
  Print lineaconsola

End

Public Function VideoExtractor(strPath As String) As String '' Esta funcion extrae solamante la pista de video de un archivo de video. Devuelve la rutade destino del archivo extraido

  Dim strCommand As String
  Dim prsVE As Process
  Dim strDir As String
  Dim strDirBase As String
  Dim strOutputFile As String
  Dim strExt As String

  strExt = File.Ext(strPath)
  strDir = File.Dir(strPath)
  strDirBase = File.BaseName(strPath)

  strOutputFile = strDir &/ strDirBase & "-muted." & strExt

  strCommand = "avconv -i '" & strPath & "' -an "
  strCommand &= "'" & strOutputFile & "'"

  Print strCommand

  prsVE = Shell strCommand For Read As "ExtVideo"

  While
    prsVE.State = prsVE.Running
    Wait 1
  Wend

  If Exist(strOutputFile) Then
    If Stat(strOutputFile).Type = gb.File Then
      Return strOutputFile
    Endif
  Endif

End

Public Sub ExtVideo_read()

  Dim lineaconsola As String

  Read #Last, lineaconsola, -80
  'lineaconsola = Trim(lineaconsola)
  Print lineaconsola

End

Public Function VideoMixer(strPath As String) As String '' Devuelve la ruta de destino del archivo remasterzado creado.
  'avconv -i output.mkv -an -i konvertilo-02-media-arrange.ogg output-unido.mkv

  Dim strCommand As String
  Dim prsVM As Process
  Dim strExt As String
  Dim strDir As String
  Dim strDirBase As String
  Dim strAudioFile As String
  Dim strInputFile As String
  Dim strOutputFile As String

  strExt = File.Ext(strPath)
  strDir = File.Dir(strPath)
  strDirBase = File.BaseName(strPath)
  strAudioFile = strDir &/ strDirBase & ".ogg"
  strInputFile = strDir &/ strDirBase & "-muted." & strExt
  strOutputFile = strDir &/ strDirBase & "-remaster." & strExt

  If Exist(strOutputFile) Then
    Kill strOutputFile
  Endif

  strCommand = "avconv -i '" & strInputFile & "' "
  strCommand &= "-i '" & strAudioFile & "' "
  strCommand &= "'" & strOutputFile & "'"

  Print strCommand

  prsVM = Shell strCommand For Read As "MixVideo"

  While
    prsVM.State = prsVM.Running
    Wait 1
  Wend

  If Exist(strOutputFile) Then
    If Stat(strOutputFile).Type = gb.File Then
      Return strOutputFile
    Else
      Return "0"
    Endif
    Return "0"
  Endif

End

Public Sub MixVideo_read()

  Dim lineaconsola As String

  Read #Last, lineaconsola, -80
  'lineaconsola = Trim(lineaconsola)
  Print lineaconsola

End

Public Function MediaArrange(strPath As String) As String '' Devuelve la rutade destino del archivo

  Dim stxExif As New String[]

  Dim strTimeStamp As String
  Dim strYear As String
  Dim strMonth As String
  Dim strDay As String
  Dim strTime As String
  Dim strMnfr As String
  Dim strModel As String
  Dim strCRC As String
  Dim intRep As Integer

  Dim prs As Process

  Dim strRenPath As String
  Dim intEx As Integer
  Dim strExt As String
  Dim intKey As Integer
  Dim strDirBase As String
  Dim strFileName As String
  Dim strDirDup As String

  strCRC = MUtility.CRC32(strPath)
  strExt = String.UCase(File.Ext(strPath)) ' Extensión del archivo en mayúsculas

  If MStarter.strState = "running" Then

    ' Extacción de un sobconjunto de metadatos de la foto
    stxExif = MUtility.ExifRaw(strPath)

    'Reemplazo de etiquetas por otras estandar si fuera el caso
    For intRep = 0 To stxExif.Max
      intKey = MStarter.stxFileExifUgly.Find(Split(stxExif[intRep], "\t")[0])
      If intKey > -1 Then
        stxExif[intRep] = MStarter.stxFileExifGood[intKey] & "\t" & Split(stxExif[intRep], "\t")[1]
      Endif
    Next

    For intEx = 0 To stxExif.Max
      Select Split(stxExif[intEx], "\t")[0]
        Case "MediaCreateDate"
          strTimeStamp = Split(stxExif[intEx], "\t")[1]
          strTimeStamp = MValidator.OnlyNumbers(strTimeStamp)
          strTimeStamp = String.Mid(strTimeStamp, 1, 14)

          strYear = String.Mid(strTimeStamp, 1, 4)
          strMonth = String.Mid(strTimeStamp, 5, 2)
          strDay = String.Mid(strTimeStamp, 7, 2)
          strTime = String.Mid(strTimeStamp, 9, 6)

        Case "Make" ' Fabricante de la cámara
          strMnfr = Split(stxExif[intEx], "\t")[1]
          strMnfr = String.UCase(strMnfr)

        Case "Model" ' Modelo de cámara sin caracteres extraños.
          strModel = Split(stxExif[intEx], "\t")[1]
          strModel = MValidator.NoSymbols(strModel)
          strModel = String.UCase(strModel)

      End Select
    Next

    Select strExt
      Case "JPG", "JPEG"
        strDirBase = User.Home &/ strYear & "F" &/ strMonth
        strDirDup = User.Home &/ strYear & "F-DUP" &/ strMonth

        strFileName = strTimeStamp & "-" & strMnfr & "-" & strModel & "-" & strCRC & "." & strExt

      Case "AVI", "MOV", "M2TS", "MP4", "WEBM", "OGV"
        strDirBase = User.Home &/ strYear & "V"
        strDirDup = User.Home &/ strYear & "V-DUP"

        strFileName = strTimeStamp & "-" & strCRC & "." & strExt

      Case Else
        strDirBase = User.Home &/ strYear & "X"
        strDirDup = User.Home &/ strYear & "X-DUP"

        strFileName = strTimeStamp & "-" & strCRC & "." & strExt

    End Select

    If String.Len(strTimeStamp) = 14 Then
      If String.Len(strCRC) = 8 Then

        strRenPath = strDirBase &/ strFileName

        If Exist(strRenPath) = False Then
          Print "Bucle 1"
          While
            Exist(strDirBase) = False
            Shell "mkdir -p " & strDirBase
            Wait 0.05
          Wend

          prs = Shell "mv '" & strPath & "' " & strRenPath
          While
            prs.State = prs.Running
            Wait 0.05
          Wend

        Else
          While
            Exist(strDirDup) = False
            Shell "mkdir -p " & strDirDup
            Wait 0.05
          Wend

          strRenPath = strDirDup &/ strFileName
          Wait 0.01
          prs = Shell "mv '" & strPath & "' " & strRenPath
          While
            prs.State = prs.Running
            Wait 0.05
          Wend

        Endif
      Endif
    Endif

  Endif
  If Exist(strRenPath) Then
    If Stat(strRenPath).Type = gb.File Then
      Return strRenPath
    Else
      Return "0"
    Endif
  Endif

End

Public Function JPEGGIFEmail(strPath As String) As String ''Si el archivo es procesado satisfactoriamente se devuelve la ruta de este.

  Dim stxExif As New String[]

  Dim strTimeStamp As String
  Dim strYear As String
  Dim strMonth As String
  Dim strDay As String
  Dim strHour As String
  Dim strMin As String
  Dim strSec As String
  Dim strCRC As String

  Dim prs As Process

  Dim strRenPath As String
  Dim intEx As Integer
  Dim strCommand As String

  strCRC = MUtility.CRC32(strPath)

  If MStarter.strState = "running" Then

    ' Extacción de un sobconjunto de metadatos de la foto
    stxExif = MUtility.ExifRaw(strPath)
    For intEx = 0 To stxExif.Max
      Select Split(stxExif[intEx], "\t")[0]
        Case "DateTimeOriginal"
          strTimeStamp = Split(stxExif[intEx], "\t")[1]
          strTimeStamp = MValidator.OnlyNumbers(strTimeStamp)
          strTimeStamp = String.Mid(strTimeStamp, 1, 14)

          strYear = String.Mid(strTimeStamp, 1, 4)
          strMonth = String.Mid(strTimeStamp, 5, 2)
          strDay = String.Mid(strTimeStamp, 7, 2)
          strHour = String.Mid(strTimeStamp, 9, 2)
          strMin = String.Mid(strTimeStamp, 11, 2)
          strSec = String.Mid(strTimeStamp, 13, 2)

      End Select
    Next

    If Not Exist(User.Home &/ strYear & "F" &/ "email") Then ' Verificación de la existencia de la carpeta
      Shell "mkdir -p " & User.Home &/ strYear & "F" &/ "email"
    Endif
    If String.Len(strTimeStamp) = 14 Then
      If String.Len(strCRC) = 8 Then
        strRenPath = User.Home &/ strYear & "F" &/ "email" &/ strTimeStamp & "-" & strCRC & "-RC.JPEG"

        If Exist(strRenPath) = False Then
          prs = Shell "cp '" & strPath & "' " & strRenPath
          strCommand = "convert -thumbnail 1200x675 -compress jpeg -quality 75 -enhance"
          strCommand &= " " & strPath & " " & strRenPath
          prs = Shell strCommand
          While
            prs.State = prs.Running
            Wait 0.05
          Wend
        Endif
      Endif
    Endif

  Endif
  If Exist(strRenPath) Then
    If Stat(strRenPath).Type = gb.File Then
      Return strRenPath
    Else
      Return "0"
    Endif
  Endif

End

Public Function JPEGPNG(strPath As String) As String ''Convierte una imágenes JPEG a otra formato PNG.

  Dim prs2 As Process
  Dim strCommand2 As String

  Dim strRenPath As String

  If MStarter.strState = "running" Then

    strRenPath = File.Dir(strPath) &/ String.LCase(File.BaseName(strPath)) & ".png"

    strCommand2 = "convert -quality 30 " & strPath & " " & strRenPath

    prs2 = Shell strCommand2
    While
      prs2.State = prs2.Running
      Wait 0.05
    Wend

  Endif

  If Exist(strRenPath) Then
    If Stat(strRenPath).Type = gb.File Then
      Return strRenPath
    Else
      Return "0"
    Endif
  Endif

End

Public Function JPEGPDF(strPath As String) As String ''Convierte todas las imágenes JPEG de la lista en un archivo PDF. Si el archivo PDF es creado satisfactoriamente se devuelve la ruta del mismo.

  Dim prs2 As Process
  Dim strCommand2 As String

  Dim strRenPath As String

  If MStarter.strState = "running" Then

    strRenPath = File.Dir(strPath) &/ String.LCase(File.BaseName(strPath)) & ".pdf"

    strCommand2 = "convert -quality 30 " & strPath & " " & strRenPath
    prs2 = Shell strCommand2
    While
      prs2.State = prs2.Running
      Wait 0.05
    Wend

  Endif

  If Exist(strRenPath) Then
    If Stat(strRenPath).Type = gb.File Then
      Return strRenPath
    Else
      Return "0"
    Endif
  Endif

End

Public Function PNGJPEGReduced(strPath As String) As String '' Devuelve la ruta al archivo jpeg creado

  Dim prs As Process

  Dim strRenPath As String
  Dim strCommand As String

  If MStarter.strState = "running" Then

    strRenPath = File.Dir(strPath) &/ String.LCase(File.BaseName(strPath)) & "-rc.jpeg"

    If Exist(strRenPath) = False Then

      strCommand = "convert -compress jpeg -quality 75 -enhance"
      strCommand &= " " & strPath & " " & strRenPath
      prs = Shell strCommand
      While
        prs.State = prs.Running
        Wait 0.05
      Wend
    Endif
  Endif

  If Exist(strRenPath) Then
    If Stat(strRenPath).Type = gb.File Then
      Return strRenPath
    Else
      Return "0"
    Endif
  Endif

End

Public Function PDFDecrypt(strPath As String) As String '' Devuelve la ruta al archivo desencriptado

  Dim strName As String
  Dim strCommand As String
  Dim prsCommand As Process

  strName = File.Dir(strPath) &/ File.BaseName(strPath) & "-dcr.pdf"
  strCommand = "gs -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile='" & strName & "' -c .setpdfwrite -f '" & strPath & "'"

  prsCommand = Shell strCommand

  While prsCommand.State = prsCommand.Running
    Wait 0.05
  Wend

  If Exist(strName) Then

    If Stat(strName).Type = gb.File Then
      Return strName
    Else
      Return "0"
    Endif
  Endif

End

Public Function PDFImage(strPath As String, intPage As Integer, Optional strMod As String) As String '' <p>Devuelve la ruta a la imagen extraida. </br> Como parametros de entrada requiere la ruta al archivo PDF, la página y el tipo de archivo que se desea extraer, PNG, JPEG, TIF.

  Dim strCommand As String
  Dim prs1 As Process
  Dim pdf As New PdfDocument
  Dim strNameNoExt As String
  Dim strNumx As String
  Dim strPageImageName As String
  Dim int As Integer

  strNameNoExt = String.Left(strPath, String.RInStr(strPath, ".") - 1)
  int = 0

  pdf.Open(strPath)
  If Exist(strNameNoExt) = False
    Shell "mkdir -p '" & strNameNoExt & "'"
  Endif

  If strMod = "" Then
    strMod = "jpeg"
  Else
    strMod = String.LCase(strMod)
  Endif

  If MStarter.strState = "running" Then

    Select String.Len(Str(intPage + 1)) ' Le sumo 1 porque convert arranca de 0
      Case 1
        strNumx = "s00" & Str(intPage + 1) '' idem
      Case 2
        strNumx = "s0" & Str(intPage + 1) '' idem
      Case 3
        strNumx = "s" & Str(intPage + 1) '' idem
    End Select

    strPageImageName = strNameNoExt &/ strNumx & "." & strMod

    ' Salia con fondo negro asi que le pude "-alpha remove" y solucionado
    strCommand = "convert -alpha remove -density 300 -resample 300x300 -quality 30 '" & strPath & "'[" & intPage & "] '" & strPageImageName & "'"

    prs1 = Shell strCommand

    While prs1.State = prs1.Running
      Wait 0.05
    Wend

    If Exist(strPageImageName) Then
      If Stat(strPageImageName).Type = gb.File Then
        Inc int
      Endif
    Endif

  Endif

  If Exist(strPageImageName) Then
    Return strPageImageName
  Else
    Return "0"
  Endif

End

Public Function PNGOCRText(strPath As String, Optional strLang As String) As String '' Devuelve la ruta al archivo .txt con el texto extraido o "0" si no hay texto.

  Dim strCommand As String
  Dim strTxtTemp As String
  Dim strFileOutput As String

  strFileOutput = File.Dir(strPath) &/ File.BaseName(strPath) & ".txt"

  If MStarter.stxOCRLang.Find(strLang) > -1 Then

    If MStarter.strState = "running" Then

      If Exist(strPath) Then
        If Stat(strPath).Type = gb.File Then
          strTxtTemp = ""

          strCommand = "tesseract '" & strPath & "' stdout -l " & strLang & " 2>&1"
          Shell strCommand To strTxtTemp

          If strTxtTemp <> "" Then
            File.Save(strFileOutput, strTxtTemp)
          Endif

          Wait 0.05

        Endif
      Endif

    Endif

  Endif

  If strTxtTemp <> "" Then
    Return strFileOutput
  Else
    Return "0"
  Endif

End

Public Function JPEGOCRText(strPath As String, Optional strLang As String) As String '' Devuelve la ruta al archivo .txt con el texto extraido o "0" si no hay texto.

  '  Dim strCommand As String
  Dim strTxtTemp As String
  Dim strFileTXT As String
  Dim strFilePNG As String
  Dim intTime As Integer

  'strFilePNG = File.Dir(strPath) &/ File.BaseName(strPath) & ".png"
  strFileTXT = File.Dir(strPath) &/ File.BaseName(strPath) & ".txt"

  If MStarter.strState = "running" Then

    If Exist(strPath) Then
      If Stat(strPath).Type = gb.File Then
        strTxtTemp = ""
        intTime = 0

        strFilePNG = JPEGPNG(strPath)

        If Exist(strFilePNG) = True

          strTxtTemp = PNGOCRText(strFilePNG, strLang)

          'strCommand = "tesseract '" & strFilePNG & "' stdout -l spa 2>&1"
          'Shell strCommand To strTxtTemp
          '
          ' If strTxtTemp <> "" Then
          '
          '   File.Save(strFileTXT, strTxtTemp)
          ' Endif
          '
          ' Wait 0.05

        Endif
      Endif
    Endif
  Endif

  Print "Contador de espera: " & CStr(intTime)

  If strTxtTemp <> "" Then
    Return strFileTXT
  Else
    Return "0"
  Endif

End

Public Function PDFOCRText(strPath As String, intPage As Integer, Optional strLang As String) As String '' Devuelve el texto extraido de la pagina. Como parametros de entrada requiere la ruta del archivo PDF la página y el idioma.

  Dim strFilePNG As String
  Dim strPageText As String

  strPageText = ""
  strFilePNG = PDFImage(strPath, intPage, "png")

  If Exist(strFilePNG) Then
    strPageText = PNGOCRText(strFilePNG, strLang)
  Endif

  Return strPageText

End

Public Function PDFImageBW(strPath As String) As String '' Extrae la imagenes del PDF en formato JPEG en Escala de grises. Devuelve la carpeta donde se extrajeron las imagenes

  Dim strCommand As String
  Dim prs1 As Process
  Dim pdf As New PdfDocument
  Dim index As Integer
  Dim strNameNoExt As String
  Dim strNumx As String
  Dim strPageImageName As String
  Dim int As Integer

  strNameNoExt = String.Left(strPath, String.RInStr(strPath, ".") - 1)
  int = 0

  pdf.Open(strPath)
  If Exist(strNameNoExt) = False
    Shell "mkdir -p '" & strNameNoExt & "'"
  Endif

  For index = 0 To pdf.Count - 1

    If MStarter.strState = "running" Then

      Select String.Len(Str(index + 1)) ' Le sumo 1 porque convert arranca de 0
        Case 1
          strNumx = "s00" & Str(index + 1) '' idem
        Case 2
          strNumx = "s0" & Str(index + 1) '' idem
        Case 3
          strNumx = "s" & Str(index + 1) '' idem
      End Select

      strPageImageName = strNameNoExt &/ strNumx & ".jpeg"

      strCommand = "convert -density 300 -resample 300x300 -type Grayscale -depth 8 -normalize -level 25%,75%,0.8 '" & strPath & "'[" & index & "] '" & strPageImageName & "'"

      prs1 = Shell strCommand

      While prs1.State = prs1.Running
        Wait 0.05
      Wend

      If Exist(strPageImageName) Then
        If Stat(strPageImageName).Type = gb.File Then
          Inc int
        Endif
      Endif

    Endif

  Next

  Desktop.Open(strNameNoExt) ' Abrir el directorio donde se estrajerosn las paginas
  If int = pdf.Count Then
    Return strNameNoExt
  Else
    Return "0"
  Endif

End

Public Function PDFR90(strPath As String) As String '' Rota las paginas 90 grados

  Dim strName As String
  Dim strCommand As String
  Dim prsCommand As Process

  strName = File.Dir(strPath) &/ File.BaseName(strPath) & "-r90.pdf"

  strCommand = "pdftk A=" & strPath & " cat A1-endeast output " & strName

  prsCommand = Shell strCommand

  While prsCommand.State = prsCommand.Running
    Wait 0.05
  Wend

  If Exist(strName) Then

    If Stat(strName).Type = gb.File Then
      Return strName
    Else
      Return "0"
    Endif
  Endif

End
