' Gambas class file

'
' Konvertilo
' Conversor y manipulador de archivos
'
' Copyright (C) MartÃ­n Belmonte
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
'

'### EVENTOS ###
Public Sub trvEntities_Drop()

  cmdFiles()

End

Public Sub tobAbout_Click()

  FAbout.ShowModal()

End

Public Sub tobConfig_Click()

  FConfig.ShowModal()

End

Public Sub tobStart_Click()

  Dim obj As Object
  Dim strFile As String
  Dim strTool As String
  Dim intPage As Integer

  Dim strReturn As String
  Dim c As Integer
  Dim r As Integer
  Dim stxPDFDir As New String[]
  Dim intS As Integer
  Dim floS As Float ' Valor de avance de la progressbar

  Dim intTime As Integer ' Tiempo promedio para procesar un archivo
  Dim intTimeTot As Integer ' Tiempo esimado para hacer todo el trabajo
  Dim intCurrTime As Integer ' Tiempo transcurrido hasta el momento

  Dim intTotal As Integer
  Dim stxTime As New Integer[]

  Inc Application.Busy

  Select MStarter.strState
    Case "stopped"

      For Each obj In pnlButtons.Children
        If Object.Type(obj) = "ToggleButton" Then
          If obj.Value = True Then
            MStarter.stxFilesPlay.Add(obj.Tag)
          Endif
        Endif
      Next

      MStarter.strState = "running"
      tobStart.Picture = Picture["icon:/22/stop"]

    Case "running"
      MStarter.stxFilesPlay.Clear
      MStarter.strState = "stopped"
      tobStart.Picture = Picture["icon:/22/play"]

  End Select

  ' Antes de comenzar puesta a cero de las listas de archivos
  MStarter.stxErr.Clear
  MStarter.stxEmail.Clear
  MStarter.stxPDF.Clear
  stxPDFDir.Clear

  ' Puesta a cero del gridview
  For c = 0 To grwData.Columns.Max
    For r = 0 To grwData.Rows.Max
      grwData[r, c].Foreground = Color.Foreground
    Next
  Next

  MStarter.stxSchedule = Scheduler(MStarter.stxFiles, MStarter.stxToolsName, MStarter.stxToolsExt)

  tmrCounter.Start

  For intS = 0 To MStarter.stxSchedule.Max

    Print MStarter.stxSchedule[intS]
    sirProcess.Start
    sirProcess.Visible = True
    intTotal = MStarter.stxSchedule.Count
    intCurrTime = MStarter.intTimer

    intTime = intCurrTime / (intS + 1)
    intTimeTot = (intTime * intTotal) - intCurrTime

    floS = floS + (1 / intTotal)
    prsBar.Value = floS

    strTool = Split(MStarter.stxSchedule[intS], "\t")[0]
    strFile = Split(MStarter.stxSchedule[intS], "\t")[1]
    intPage = CInt(Split(MStarter.stxSchedule[intS], "\t")[2])

    strReturn = MBatch.FileDelibery(strTool, strFile, intPage)

    stxTime.Clear

    'MStarter.intTimer

    intCurrTime = MStarter.intTimer

    intTime = intCurrTime / (intS + 1)

    intTimeTot = intTime * intTotal

    stxTime = MUtility.SecondsToHMS(intTimeTot - intCurrTime)

    lblInformation.Text = (strReturn)
    lblTotals.Text = CStr(intS + 1) & " : " & CStr(intTotal)

    lblEstimated.Text = "Falta" & ": " & CStr(stxTime[0]) & ":" & CStr(stxTime[1]) & ":" & CStr(stxTime[2])

  Next
  ' Finalizacion del proceso e indicacion en el formulario mediante cambio de icono
  MStarter.stxFilesPlay.Clear
  MStarter.strState = "stopped"
  tobStart.Picture = Picture["icon:/22/play"]

  sirProcess.Stop
  sirProcess.Visible = False

  lblInformation.Text = (("Proceso finalizado") & ", " & ("tiempo empleado") & ": " & CStr(MStarter.intTimer))

  tmrCounter.Stop
  MStarter.intTimer = 0

  Dec Application.Busy

End

' Public Sub tobStart_Click()
'
'   Dim obj As Object
'   Dim int As Integer
'   Dim intT As Integer
'   Dim strFile As String
'   Dim strTool As String
'   Dim strReturn As String
'   Dim strTimeGIF As String
'   Dim strFileGIF As String
'   Dim strTimePDF As String
'   Dim strFilePDF As String
'   Dim str As String
'
'   Dim c As Integer
'   Dim r As Integer
'   Dim stxPDFDir As New String[]
'   Dim strDir As String
'   Dim strTmpDir As String
'   Dim strOCRTxt As String
'   Dim strOCRFile As String
'
'   Inc Application.Busy
'
'   Select MStarter.strState
'     Case "stopped"
'
'       For Each obj In pnlButtons.Children
'         If Object.Type(obj) = "ToggleButton" Then
'           If obj.Value = True Then
'             MStarter.stxFilesPlay.Add(obj.Tag)
'           Endif
'         Endif
'       Next
'
'       MStarter.strState = "running"
'       tobStart.Picture = Picture["icon:/22/stop"]
'
'     Case "running"
'       MStarter.stxFilesPlay.Clear
'       MStarter.strState = "stopped"
'       tobStart.Picture = Picture["icon:/22/play"]
'
'   End Select
'
'   ' Antes de comenzar puesta a cero de las listas de archivos
'   MStarter.stxErr.Clear
'   MStarter.stxEmail.Clear
'   MStarter.stxPDF.Clear
'   stxPDFDir.Clear
'
'   ' Puesta a cero del gridview
'   For c = 0 To grwData.Columns.Max
'     For r = 0 To grwData.Rows.Max
'       grwData[r, c].Foreground = Color.Foreground
'     Next
'   Next
'
'   If MStarter.stxFilesPlay.Count > 0 Then
'
'     For int = 0 To grwData.Rows.Count - 1
'       'Comprobar si el archivo ya fue procesado
'       If grwData[int, 3].Foreground <> Color.Red Then
'
'         If MStarter.stxFilesPlay.Find(String.LCase(grwData[int, 3].Text)) > -1 Then
'
'           For intT = 0 To MStarter.stxToolsName.Max
'             lblInformation.Text = ("Herramienta") & " : " & MStarter.stxToolsName[intT]
'
'             If InStr(MStarter.stxToolsExt[intT], String.LCase(grwData[int, 3].Text)) > 0 Then
'               If Settings[String.LCase(grwData[int, 3].Text) & "/" & MStarter.stxToolsName[intT]] = True Then
'                 ' Archivo a procesar
'                 strFile = grwData[int, 0].Text
'
'                 ' Herramienta a usar.
'                 strTool = MStarter.stxToolsName[intT]
'                 strReturn = "0"
'
'                 ' Procesado del archivo y respuesta de la herramienta, si es -1 es que no se proceso, si es una ruta valida es que se proceso correctamente.
'                 ' Luego segun sea el caso de procesos de 1>1 devuelve la ruta de un archivo, en el caso 1>VARIOS como la extraccion de imagenes de un PDF
'                 ' el valor de retorno dependera de la herramienta. en el caso de PDF>JPEG por ejemplo devuelve la ruta al directorio que se creo para las imagenes
'
'                 strReturn = MBatch.FileDelibery(strFile, strTool)
'
'                 lblInformation.Text = ("Herramienta") & ": " & MStarter.stxToolsName[intT] & " " & ("Archivo") & ": " & File.Name(strFile)
'
'                 Select strReturn
'                   Case "0"
'
'                     MStarter.stxErr.Add(strTool & "\t" & strFile)
'
'                   Case Else
'                     Select strTool
'                       Case "JPEG>Email"
'                         MStarter.stxEmail.Add(strReturn)
'                         grwData[int, 3].Foreground = Color.Red
'                         ' Aqui se podria agregar algun texto en una colunma que sea del estilo "finalizado" o "procesando" etc
'                       Case "JPEG>PDF"
'
'                         MStarter.stxPDF.Add(strReturn)
'                         grwData[int, 3].Foreground = Color.Red
'
'                       Case "PDF>OCR-Text"
'                         'MStarter.strOCRTxt = ""
'
'                         MStarter.strOCRFile = File.Dir(strFile) &/ File.BaseName(strFile) & ".txt"
'
'                         File.Save(MStarter.strOCRFile, MStarter.strOCRTxt)
'                         MUtility.f
'
'                         If Exist(MStarter.strOCRFile) Then
'                           Desktop.Open(MStarter.strOCRFile, True)
'
'                         Endif
'                         '****************************
'
'                       Case Else
'                         grwData[int, 3].Foreground = Color.Red
'                     End Select
'                 End Select
'
'               Endif
'             Endif
'           Next
'         Endif
'       Endif
'     Next
'   Endif
'
'   ' Casos particulares para acciones sobre un conjunto de archivos ya procesados o de salida.
'   ' Por ejemplo enviarlos por email o hacer un archivo zip o realizar un post proceso.
'
'   'Creacion del archivo GIF unificado
'   If MStarter.stxEmail.Count > 0 Then
'     strTimeGIF = Format(Now(), "yyyymmddhhnnss")
'     strFileGIF = "/tmp" &/ strTimeGIF & ".gif"
'     prsBar = Shell "convert -delay 150 -loop 0 " & MStarter.stxEmail.Join(" ") & " " & strFileGIF
'
'     While prsBar.State = prsBar.Running
'       Wait 0.1
'     Wend
'
'     Desktop.SendMail([], [], [], strTimeGIF, "", strFileGIF)
'
'   Endif
'
'   'Creacion del archivo PDF unificado
'   If MStarter.stxPDF.Count > 0 Then
'     strTimePDF = Format(Now(), "yyyymmddhhnnss")
'     'strFilePDF = "/tmp" &/ strTimePDF & ".pdf"
'
'     For Each str In MStarter.stxPDF
'       strTmpDir = File.Dir(str)
'
'       If stxPDFDir.Find(strTmpDir) = -1 Then
'         stxPDFDir.Add(strTmpDir)
'       Endif
'     Next
'
'     Select stxPDFDir.Count
'
'       Case 1
'         strDir = MUtility.DirParent(stxPDFDir[0])
'
'         If InStr(Stat(strDir).Perm.User, "w") Then
'           strFilePDF = stxPDFDir[0] & "#" & strTimePDF & ".pdf"
'         Endif
'
'       Case Else
'         strFilePDF = User.Home &/ strTimePDF & ".pdf"
'     End Select
'
'     ' Si todas las imagenes se encuentran en el mismo directorio se intentara crear un pdf
'     ' con el mismo nombre del directorio sin caractares como espacios comillas simples etc.
'     ' en un nivel superior de dicho directorio, siempre y cuando se cuente con permisos de
'     ' escritura en este. si no fuera el caso entonces se crearia un archivo en el directorio
'     ' HOME con un nombre tal como 20171230153412.pdf (yyyymmddhhnnss)
'
'     prsBar = Shell "pdftk " & MStarter.stxPDF.Join(" ") & " cat output " & strFilePDF
'
'     While prsBar.State = prsBar.Running
'       Wait 0.1
'     Wend
'
'   Endif
'
'   ' Finalizacion del proceso e indicacion en el formulario mediante cambio de icono
'   MStarter.stxFilesPlay.Clear
'   MStarter.strState = "stopped"
'   tobStart.Picture = Picture["icon:/22/play"]
'
'   Dec Application.Busy
'
' End

Public Function Scheduler(stxFiles As String[], stxTool As String[], stxExt As String[]) As String[] '' stxFiles es la lista de archivos, stxTool es la lista de herramientas, stxExt es la lista de extensiones a las que aplicar las herramientas y estas dos ultimas listas trabajan juntas cada indice se corresponde en ambas listas.

  Dim stxSch As New String[]
  Dim int1 As Integer
  Dim int2 As Integer
  Dim pdf As New PdfDocument ' Requiere el componente gb.pdf
  Dim int3 As Integer
  Dim strExtension As String
  Dim stxVTool As New String[] ' Herramienta vÃ¡lida

  stxVTool.Clear

  For int1 = 0 To stxTool.Max

    For int2 = 0 To stxFiles.Max
      strExtension = String.LCase(File.Ext(stxFiles[int2]))

      If File.Ext(stxFiles[int2]) = stxExt[int1] Then  ' Comprobar si la extension de archivo tiene acciones planeadas
        If Settings[strExtension & "/" & stxTool[int1]] = True Then ' Comprobar si la herramienta esta seleccionada
          Select String.LCase(stxExt[int1])
            Case "pdf" ' Caso en el que un archivo tiene varias paginas
              pdf.Open(stxFiles[int2])
              For int3 = 0 To pdf.Count - 1
                stxSch.Add(stxTool[int1] & "\t" & stxFiles[int2] & "\t" & CStr(int3))
              Next
            Case Else
              stxSch.Add(stxTool[int1] & "\t" & stxFiles[int2] & "\t" & "0")
          End Select
        Endif
      Endif
    Next

  Next

  ' AcÃ¡ ya se tiene la lista de trabajo completa y, por lo tanto se puede configurar una barra de progreso por ejemplo.
  Return stxSch

End

Public Sub FileExtButton_Click()

  Dim tgb As ToggleButton

  tgb = Last

  If tgb.Value = True Then

    FTools.Run(tgb.Text)

  Else
    Print "Desactivado " & tgb.Text
  Endif

End

Public Sub tobHelp_Click()

  Dim strFile As String

  strFile = MStarter.strAppPath &/ "README.md"
  If Exist(strFile)
    Desktop.Open(strFile)
  Endif

End

'##############################################################################

Public Sub grwData_Drop()

  Inc Application.Busy
  cmdFiles()
  Dec Application.Busy

End

'### FUNCIONES ###

Public Function cmdFiles() As String[]

  Dim strPath As String
  Dim stxPaths As New String[]
  Dim stxFilesTmp As New String[]
  Dim strPathTmp As String

  stxPaths = MUtility.FilesList(Drag.Paste("text/uri-list"))

  ' En este punto se tiene la lista de archivos
  ' Para cada ruta de archivo se verifica que exista y se extraen los metadaos de este
  For Each strPath In stxPaths
    If Exist(strPath) Then

      Select Stat(strPath).Type

        Case gb.File
          If MStarter.stxFiles.Find(strPath) = -1 Then
            MStarter.stxFiles.Add(strPath)
          Endif

        Case gb.Directory

          stxFilesTmp.Clear
          stxFilesTmp = MUtility.ScanFolder(strPath)

          For Each strPathTmp In stxFilesTmp
            If MStarter.stxFiles.Find(strPathTmp) = -1 Then
              MStarter.stxFiles.Add(strPathTmp)
            Endif
          Next

      End Select

    Endif
  Next
  ' Orden de la lista
  If MStarter.stxFiles.Count > 0 Then
    MStarter.stxFiles.Sort
  Endif

  cmdCheckFiles()

End

Public Sub cmdCheckFiles() ' Hace dos cosas: Cargar el gridview y cargar el Treeview.

  Dim stxFInfo As New String[]
  Dim intF As Integer
  Dim intI As Integer
  Dim intH As Integer
  Dim intT As Integer
  Dim strExtTmp As String
  Dim btn As ToggleButton
  Dim intPg As Integer
  Dim intPages As Integer
  Dim strPages As String

  grwData.Header = 3
  grwData.Grid = True
  grwData.Columns.Count = 10

  For intH = 0 To MStarter.stxHeaders.Max
    grwData.Columns[intH].Text = MStarter.stxHeaders[intH]
    Select intH
      Case 0, 1, 2, 5, 6, 7
        grwData.Columns[intH].Width = 0
      Case 3, 4, 8
        grwData.Columns[intH].Width = Settings["GridColumn/" & CStr(intH), 75]
    End Select
    '     grwData.Columns[intH].Width = 50
  Next

  grwData.Rows.Count = 0
  grwData.Rows.Count = MStarter.stxFiles.Count

  MStarter.stxExt.Clear

  For intI = 0 To MStarter.stxFiles.Max
    stxFInfo.Clear

    'Extraccion de la informacion del arcivo
    stxFInfo = MUtility.FileInfo(MStarter.stxFiles[intI])
    'Cantidad de pÃ¡ginas
    stxFInfo.Add("CountPages" & "\t" & MUtility.ExifPages(MStarter.stxFiles[intI]))

    strPages = ""

    For intF = 0 To stxFInfo.Max

      'grwData[intI, intF].Text = Split(stxFInfo[intF], "\t")[1]

      Select Split(stxFInfo[intF], "\t")[0]

        Case "FileExt"
          strExtTmp = String.LCase(Split(stxFInfo[intF], "\t")[1])
          If strExtTmp <> "" Then
            If MStarter.stxExt.Find(strExtTmp) = -1 Then
              MStarter.stxExt.Add(strExtTmp)
            Endif
          Endif

          grwData[intI, intF].Text = Split(stxFInfo[intF], "\t")[1]

        Case "CountPages"
          intPages = CInt(Split(stxFInfo[intF], "\t")[1])

          For intPg = 0 To intPages - 1
            strPages &= "1"
          Next

          grwData[intI, intF].Text = strPages

        Case Else

          grwData[intI, intF].Text = Split(stxFInfo[intF], "\t")[1]

      End Select
    Next
  Next

  'Rellenar el treeview
  trvEntities.Clear

  trvEntities.Add("fileextension", ("ExtensiÃ³n"))
  trvEntities["fileextension"].Expanded = True

  pnlButtons.Children.Clear

  For intT = 0 To MStarter.stxExt.Max
    trvEntities.Add(MStarter.stxExt[intT], MStarter.stxExt[intT],, "fileextension")

    btn = New ToggleButton(pnlButtons) As "FileExtButton"
    With btn
      .Name = MStarter.stxExt[intT]
      .Text = String.UCase(MStarter.stxExt[intT])
      .Tag = String.LCase(MStarter.stxExt[intT])
      .Width = ((String.Len(MStarter.stxExt[intT])) * 8) + 16
      .Height = 28

    End With

  Next

End

Public Sub tobClean_Click()

  MStarter.stxFiles.Clear
  MStarter.stxEmail.Clear
  MStarter.stxPDF.Clear

  MStarter.stxFilesPlay.Clear
  MStarter.strState = "stopped"

  trvEntities.Clear
  grwData.Clear
  grwData.Rows.Count = 0
  pnlButtons.Children.Clear

  tobStart.Picture = Picture["icon:/22/play"]
  lblInformation.Text = ""

End

Public Sub Form_Open()

  HSplit1.Layout = [1, 5]
  sirProcess.Stop
  sirProcess.Visible = False

End

Public Sub tmrCounter_Timer()

  Inc MStarter.intTimer

End

Public Sub grwData_ColumnResize(Column As Integer)

  Settings["GridColumn/" & CStr(Column)] = grwData.Columns[Column].Width

End

Public Sub grwData_DblClick()

  Dim inx As New Integer[]
  Dim inxMod As New Integer[]
  Dim str As String
  Dim int As Integer

  str = grwData[grwData.Row, 8].Text

  MStarter.stxPages.Clear

  For int = 1 To String.Len(str)
    MStarter.stxPages.Add(CInt(String.Mid(str, int, 1)))
  Next

  inxMod = MStarter.stxPages

  FPages.Run(inxMod)

  Wait 0.01
  Print "control 1"

  '  If inxMod <> MStarter.stxPages Then
  str = ""
  If inx <> MStarter.stxPages Then
    For int = 0 To MStarter.stxPages.Max
      str &= MStarter.stxPages[int]
    Next
    grwData[grwData.Row, 8].Text = str
    grwData[grwData.Row, 8].Refresh

  Endif
  '  Endif
  Print "control 2"

End
