' Gambas class file

'
' Konvertilo
' Conversor y manipulador de archivos
'
' Copyright (C) Martín Belmonte
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
'

'### EVENTOS ###
Public Sub trvEntities_Drop()

  cmdFiles()

End

Public Sub tobAbout_Click()

  FAbout.ShowModal()

End

Public Sub tobConfig_Click()

  FConfig.ShowModal()

End

Public Sub tobStart_Click()

  Dim obj As Object
  Dim int As Integer
  Dim intT As Integer
  Dim strFile As String
  Dim strTool As String
  Dim strReturn As String
  Dim strTimeJob As String
  Dim strJobFile As String
  Dim prs As Process

  Inc Application.Busy

  Select MStarter.strState
    Case "stopped"

      For Each obj In pnlButtons.Children
        If Object.Type(obj) = "ToggleButton" Then
          If obj.Value = True Then
            MStarter.stxFilesPlay.Add(obj.Tag)
          Endif
        Endif
      Next

      MStarter.strState = "running"
      tobStart.Picture = Picture["icon:/22/stop"]

    Case "running"
      MStarter.stxFilesPlay.Clear
      MStarter.strState = "stopped"
      tobStart.Picture = Picture["icon:/22/play"]

  End Select

  If MStarter.stxFilesPlay.Count > 0 Then

    For int = 0 To grwData.Rows.Count - 1
      'Comprobar si el archivo ya fue procesado
      If grwData[int, 3].Foreground <> Color.Red Then

        If MStarter.stxFilesPlay.Find(String.LCase(grwData[int, 3].Text)) > -1 Then

          For intT = 0 To MStarter.stxToolsName.Max

            If InStr(MStarter.stxToolsExt[intT], String.LCase(grwData[int, 3].Text)) > 0 Then
              If Settings[String.LCase(grwData[int, 3].Text) & "/" & MStarter.stxToolsName[intT]] = True Then
                ' Archivo a procesar
                strFile = grwData[int, 0].Text

                ' Herramienta a usar.
                strTool = MStarter.stxToolsName[intT]
                strReturn = "0"
                strReturn = MBatch.FileDelibery(strFile, strTool)

                If strReturn <> "0" Then

                  Select strTool
                    Case "JPEG>Email"
                      MStarter.stxEmail.Add(strReturn)
                      grwData[int, 3].Foreground = Color.Green
                    Case Else
                      grwData[int, 3].Foreground = Color.Red
                  End Select
                Endif
              Endif
            Endif
          Next
        Endif
      Endif
    Next
  Endif

  ' Casos particulares para acciones sobre un conjunto de archivos ya procesados o de salida.
  ' Por ejemplo enviarlos por email o hacer un archivo zip o realizar un post proceso.

  If MStarter.stxEmail.Count > 0 Then
    strTimeJob = Format(Now(), "yyyymmddhhnnss")
    strJobFile = "/tmp" &/ strTimeJob & ".gif"
    prs = Shell "convert -delay 150 -loop 0 " & MStarter.stxEmail.Join(" ") & " " & strJobFile

    While prs.State = prs.Running
      Wait 0.1
    Wend

    Desktop.SendMail([], [], [], strTimeJob, "", strJobFile)

  Endif

  MStarter.stxFilesPlay.Clear
  MStarter.strState = "stopped"
  tobStart.Picture = Picture["icon:/22/play"]
  Dec Application.Busy

End

Public Sub FileExtButton_Click()

  Dim tgb As ToggleButton

  tgb = Last

  If tgb.Value = True Then

    FTools.Run(tgb.Text)

  Else
    Print "Desactivado " & tgb.Text
  Endif

End

Public Sub tobHelp_Click()

  Dim strFile As String

  strFile = MStarter.strAppPath &/ "README.md"
  If Exist(strFile)
    Desktop.Open(strFile)
  Endif

End

'##############################################################################

Public Sub grwData_Drop()

  Inc Application.Busy
  cmdFiles()
  Dec Application.Busy

End

'### FUNCIONES ###

Public Function cmdFiles() As String[]

  Dim strPath As String
  Dim stxPaths As New String[]
  Dim stxFilesTmp As New String[]

  'Dim strInfo As String
  Dim strPathTmp As String

  stxPaths = MUtility.FilesList(Drag.Paste("text/uri-list"))

  ' En este punto se tiene la lista de archivos

  ' Para cada ruta de archivo se verifica que exista y se extraen los metadaos de este
  For Each strPath In stxPaths
    If Exist(strPath) Then

      Select Stat(strPath).Type

        Case gb.File
          If MStarter.stxFiles.Find(strPath) = -1 Then
            MStarter.stxFiles.Add(strPath)
          Endif

        Case gb.Directory

          stxFilesTmp.Clear
          stxFilesTmp = MUtility.ScanFolder(strPath)

          For Each strPathTmp In stxFilesTmp
            If MStarter.stxFiles.Find(strPathTmp) = -1 Then
              MStarter.stxFiles.Add(strPathTmp)
            Endif
          Next

      End Select

    Endif
  Next
  ' Orden de la lista
  If MStarter.stxFiles.Count > 0 Then
    MStarter.stxFiles.Sort
  Endif

  cmdCheckFiles()

End

Public Sub cmdCheckFiles() ' Hace dos cosas: Cargar el gridview y cargar el Treeview.

  Dim stxFInfo As New String[]
  Dim intF As Integer
  Dim intI As Integer
  Dim intH As Integer
  Dim intT As Integer
  Dim strExtTmp As String
  Dim btn As ToggleButton

  grwData.Header = 3
  grwData.Grid = True
  grwData.Columns.Count = 9

  For intH = 0 To MStarter.stxHeaders.Max
    grwData.Columns[intH].Text = MStarter.stxHeaders[intH]
  Next

  grwData.Rows.Count = 0
  grwData.Rows.Count = MStarter.stxFiles.Count

  MStarter.stxExt.Clear

  For intI = 0 To MStarter.stxFiles.Max
    stxFInfo.Clear

    stxFInfo = MUtility.FileInfo(MStarter.stxFiles[intI])

    For intF = 0 To 8 'stxFInfo.Max

      grwData[intI, intF].Text = Split(stxFInfo[intF], "\t")[1]

      If Split(stxFInfo[intF], "\t")[0] = "FileExt" Then
        strExtTmp = String.LCase(Split(stxFInfo[intF], "\t")[1])
        If strExtTmp <> "" Then
          If MStarter.stxExt.Find(strExtTmp) = -1 Then
            MStarter.stxExt.Add(strExtTmp)
          Endif
        Endif
      Endif
    Next
  Next

  'Rellenar el treeview
  trvEntities.Clear

  trvEntities.Add("fileextension", ("Extensión"))
  trvEntities["fileextension"].Expanded = True

  pnlButtons.Children.Clear

  For intT = 0 To MStarter.stxExt.Max
    trvEntities.Add(MStarter.stxExt[intT], MStarter.stxExt[intT],, "fileextension")

    btn = New ToggleButton(pnlButtons) As "FileExtButton"
    With btn
      .Name = MStarter.stxExt[intT]
      .Text = String.UCase(MStarter.stxExt[intT])
      .Tag = String.LCase(MStarter.stxExt[intT])
      .Width = ((String.Len(MStarter.stxExt[intT])) * 8) + 16
      .Height = 28

    End With

  Next

End

Public Sub tobClean_Click()

  MStarter.stxFiles.Clear
  MStarter.stxEmail.Clear
  MStarter.stxFilesPlay.Clear
  MStarter.strState = "stopped"

  trvEntities.Clear
  grwData.Clear
  grwData.Rows.Count = 0
  pnlButtons.Children.Clear

  tobStart.Picture = Picture["icon:/22/play"]

End

Public Sub Form_Open()

  HSplit1.Layout = [1, 5]

End
